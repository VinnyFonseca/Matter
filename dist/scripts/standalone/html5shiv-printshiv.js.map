{"version":3,"names":[],"mappings":"","sources":["standalone/html5shiv-printshiv.js"],"sourcesContent":["/**\r\n* @preserve HTML5 Shiv 3.7.3-pre | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\r\n*/\r\n;(function(window, document) {\r\n/*jshint evil:true */\r\n  /** version */\r\n  var version = '3.7.3-pre';\r\n\r\n  /** Preset options */\r\n  var options = window.html5 || {};\r\n\r\n  /** Used to skip problem elements */\r\n  var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\r\n\r\n  /** Not all elements can be cloned in IE **/\r\n  var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\r\n\r\n  /** Detect whether the browser supports default html5 styles */\r\n  var supportsHtml5Styles;\r\n\r\n  /** Name of the expando, to work with multiple documents or to re-shiv one document */\r\n  var expando = '_html5shiv';\r\n\r\n  /** The id for the the documents expando */\r\n  var expanID = 0;\r\n\r\n  /** Cached data for each document */\r\n  var expandoData = {};\r\n\r\n  /** Detect whether the browser supports unknown elements */\r\n  var supportsUnknownElements;\r\n\r\n  (function() {\r\n    try {\r\n        var a = document.createElement('a');\r\n        a.innerHTML = '<xyz></xyz>';\r\n        //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\r\n        supportsHtml5Styles = ('hidden' in a);\r\n\r\n        supportsUnknownElements = a.childNodes.length == 1 || (function() {\r\n          // assign a false positive if unable to shiv\r\n          (document.createElement)('a');\r\n          var frag = document.createDocumentFragment();\r\n          return (\r\n            typeof frag.cloneNode == 'undefined' ||\r\n            typeof frag.createDocumentFragment == 'undefined' ||\r\n            typeof frag.createElement == 'undefined'\r\n          );\r\n        }());\r\n    } catch(e) {\r\n      // assign a false positive if detection fails => unable to shiv\r\n      supportsHtml5Styles = true;\r\n      supportsUnknownElements = true;\r\n    }\r\n\r\n  }());\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * Creates a style sheet with the given CSS text and adds it to the document.\r\n   * @private\r\n   * @param {Document} ownerDocument The document.\r\n   * @param {String} cssText The CSS text.\r\n   * @returns {StyleSheet} The style element.\r\n   */\r\n  function addStyleSheet(ownerDocument, cssText) {\r\n    var p = ownerDocument.createElement('p'),\r\n        parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\r\n\r\n    p.innerHTML = 'x<style>' + cssText + '</style>';\r\n    return parent.insertBefore(p.lastChild, parent.firstChild);\r\n  }\r\n\r\n  /**\r\n   * Returns the value of `html5.elements` as an array.\r\n   * @private\r\n   * @returns {Array} An array of shived element node names.\r\n   */\r\n  function getElements() {\r\n    var elements = html5.elements;\r\n    return typeof elements == 'string' ? elements.split(' ') : elements;\r\n  }\r\n\r\n  /**\r\n   * Extends the built-in list of html5 elements\r\n   * @memberOf html5\r\n   * @param {String|Array} newElements whitespace separated list or array of new element names to shiv\r\n   * @param {Document} ownerDocument The context document.\r\n   */\r\n  function addElements(newElements, ownerDocument) {\r\n    var elements = html5.elements;\r\n    if(typeof elements != 'string'){\r\n      elements = elements.join(' ');\r\n    }\r\n    if(typeof newElements != 'string'){\r\n      newElements = newElements.join(' ');\r\n    }\r\n    html5.elements = elements +' '+ newElements;\r\n    shivDocument(ownerDocument);\r\n  }\r\n\r\n    /**\r\n   * Returns the data associated to the given document\r\n   * @private\r\n   * @param {Document} ownerDocument The document.\r\n   * @returns {Object} An object of data.\r\n   */\r\n  function getExpandoData(ownerDocument) {\r\n    var data = expandoData[ownerDocument[expando]];\r\n    if (!data) {\r\n        data = {};\r\n        expanID++;\r\n        ownerDocument[expando] = expanID;\r\n        expandoData[expanID] = data;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * returns a shived element for the given nodeName and document\r\n   * @memberOf html5\r\n   * @param {String} nodeName name of the element\r\n   * @param {Document} ownerDocument The context document.\r\n   * @returns {Object} The shived element.\r\n   */\r\n  function createElement(nodeName, ownerDocument, data){\r\n    if (!ownerDocument) {\r\n        ownerDocument = document;\r\n    }\r\n    if(supportsUnknownElements){\r\n        return ownerDocument.createElement(nodeName);\r\n    }\r\n    if (!data) {\r\n        data = getExpandoData(ownerDocument);\r\n    }\r\n    var node;\r\n\r\n    if (data.cache[nodeName]) {\r\n        node = data.cache[nodeName].cloneNode();\r\n    } else if (saveClones.test(nodeName)) {\r\n        node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\r\n    } else {\r\n        node = data.createElem(nodeName);\r\n    }\r\n\r\n    // Avoid adding some elements to fragments in IE < 9 because\r\n    // * Attributes like `name` or `type` cannot be set/changed once an element\r\n    //   is inserted into a document/fragment\r\n    // * Link elements with `src` attributes that are inaccessible, as with\r\n    //   a 403 response, will cause the tab/window to crash\r\n    // * Script elements appended to fragments will execute when their `src`\r\n    //   or `text` property is set\r\n    return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\r\n  }\r\n\r\n  /**\r\n   * returns a shived DocumentFragment for the given document\r\n   * @memberOf html5\r\n   * @param {Document} ownerDocument The context document.\r\n   * @returns {Object} The shived DocumentFragment.\r\n   */\r\n  function createDocumentFragment(ownerDocument, data){\r\n    if (!ownerDocument) {\r\n        ownerDocument = document;\r\n    }\r\n    if(supportsUnknownElements){\r\n        return ownerDocument.createDocumentFragment();\r\n    }\r\n    data = data || getExpandoData(ownerDocument);\r\n    var clone = data.frag.cloneNode(),\r\n        i = 0,\r\n        elems = getElements(),\r\n        l = elems.length;\r\n    for(;i<l;i++){\r\n        clone.createElement(elems[i]);\r\n    }\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Shivs the `createElement` and `createDocumentFragment` methods of the document.\r\n   * @private\r\n   * @param {Document|DocumentFragment} ownerDocument The document.\r\n   * @param {Object} data of the document.\r\n   */\r\n  function shivMethods(ownerDocument, data) {\r\n    if (!data.cache) {\r\n        data.cache = {};\r\n        data.createElem = ownerDocument.createElement;\r\n        data.createFrag = ownerDocument.createDocumentFragment;\r\n        data.frag = data.createFrag();\r\n    }\r\n\r\n\r\n    ownerDocument.createElement = function(nodeName) {\r\n      //abort shiv\r\n      if (!html5.shivMethods) {\r\n          return data.createElem(nodeName);\r\n      }\r\n      return createElement(nodeName, ownerDocument, data);\r\n    };\r\n\r\n    ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\r\n      'var n=f.cloneNode(),c=n.createElement;' +\r\n      'h.shivMethods&&(' +\r\n        // unroll the `createElement` calls\r\n        getElements().join().replace(/[\\w\\-:]+/g, function(nodeName) {\r\n          data.createElem(nodeName);\r\n          data.frag.createElement(nodeName);\r\n          return 'c(\"' + nodeName + '\")';\r\n        }) +\r\n      ');return n}'\r\n    )(html5, data.frag);\r\n  }\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * Shivs the given document.\r\n   * @memberOf html5\r\n   * @param {Document} ownerDocument The document to shiv.\r\n   * @returns {Document} The shived document.\r\n   */\r\n  function shivDocument(ownerDocument) {\r\n    if (!ownerDocument) {\r\n        ownerDocument = document;\r\n    }\r\n    var data = getExpandoData(ownerDocument);\r\n\r\n    if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\r\n      data.hasCSS = !!addStyleSheet(ownerDocument,\r\n        // corrects block display not defined in IE6/7/8/9\r\n        'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +\r\n        // adds styling not present in IE6/7/8/9\r\n        'mark{background:#FF0;color:#000}' +\r\n        // hides non-rendered elements\r\n        'template{display:none}'\r\n      );\r\n    }\r\n    if (!supportsUnknownElements) {\r\n      shivMethods(ownerDocument, data);\r\n    }\r\n    return ownerDocument;\r\n  }\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * The `html5` object is exposed so that more elements can be shived and\r\n   * existing shiving can be detected on iframes.\r\n   * @type Object\r\n   * @example\r\n   *\r\n   * // options can be changed before the script is included\r\n   * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\r\n   */\r\n  var html5 = {\r\n\r\n    /**\r\n     * An array or space separated string of node names of the elements to shiv.\r\n     * @memberOf html5\r\n     * @type Array|String\r\n     */\r\n    'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',\r\n\r\n    /**\r\n     * current version of html5shiv\r\n     */\r\n    'version': version,\r\n\r\n    /**\r\n     * A flag to indicate that the HTML5 style sheet should be inserted.\r\n     * @memberOf html5\r\n     * @type Boolean\r\n     */\r\n    'shivCSS': (options.shivCSS !== false),\r\n\r\n    /**\r\n     * Is equal to true if a browser supports creating unknown/HTML5 elements\r\n     * @memberOf html5\r\n     * @type boolean\r\n     */\r\n    'supportsUnknownElements': supportsUnknownElements,\r\n\r\n    /**\r\n     * A flag to indicate that the document's `createElement` and `createDocumentFragment`\r\n     * methods should be overwritten.\r\n     * @memberOf html5\r\n     * @type Boolean\r\n     */\r\n    'shivMethods': (options.shivMethods !== false),\r\n\r\n    /**\r\n     * A string to describe the type of `html5` object (\"default\" or \"default print\").\r\n     * @memberOf html5\r\n     * @type String\r\n     */\r\n    'type': 'default',\r\n\r\n    // shivs the document according to the specified `html5` object options\r\n    'shivDocument': shivDocument,\r\n\r\n    //creates a shived element\r\n    createElement: createElement,\r\n\r\n    //creates a shived documentFragment\r\n    createDocumentFragment: createDocumentFragment,\r\n\r\n    //extends list of elements\r\n    addElements: addElements\r\n  };\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  // expose html5\r\n  window.html5 = html5;\r\n\r\n  // shiv the document\r\n  shivDocument(document);\r\n\r\n  /*------------------------------- Print Shiv -------------------------------*/\r\n\r\n  /** Used to filter media types */\r\n  var reMedia = /^$|\\b(?:all|print)\\b/;\r\n\r\n  /** Used to namespace printable elements */\r\n  var shivNamespace = 'html5shiv';\r\n\r\n  /** Detect whether the browser supports shivable style sheets */\r\n  var supportsShivableSheets = !supportsUnknownElements && (function() {\r\n    // assign a false negative if unable to shiv\r\n    var docEl = document.documentElement;\r\n    return !(\r\n      typeof document.namespaces == 'undefined' ||\r\n      typeof document.parentWindow == 'undefined' ||\r\n      typeof docEl.applyElement == 'undefined' ||\r\n      typeof docEl.removeNode == 'undefined' ||\r\n      typeof window.attachEvent == 'undefined'\r\n    );\r\n  }());\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * Wraps all HTML5 elements in the given document with printable elements.\r\n   * (eg. the \"header\" element is wrapped with the \"html5shiv:header\" element)\r\n   * @private\r\n   * @param {Document} ownerDocument The document.\r\n   * @returns {Array} An array wrappers added.\r\n   */\r\n  function addWrappers(ownerDocument) {\r\n    var node,\r\n        nodes = ownerDocument.getElementsByTagName('*'),\r\n        index = nodes.length,\r\n        reElements = RegExp('^(?:' + getElements().join('|') + ')$', 'i'),\r\n        result = [];\r\n\r\n    while (index--) {\r\n      node = nodes[index];\r\n      if (reElements.test(node.nodeName)) {\r\n        result.push(node.applyElement(createWrapper(node)));\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates a printable wrapper for the given element.\r\n   * @private\r\n   * @param {Element} element The element.\r\n   * @returns {Element} The wrapper.\r\n   */\r\n  function createWrapper(element) {\r\n    var node,\r\n        nodes = element.attributes,\r\n        index = nodes.length,\r\n        wrapper = element.ownerDocument.createElement(shivNamespace + ':' + element.nodeName);\r\n\r\n    // copy element attributes to the wrapper\r\n    while (index--) {\r\n      node = nodes[index];\r\n      node.specified && wrapper.setAttribute(node.nodeName, node.nodeValue);\r\n    }\r\n    // copy element styles to the wrapper\r\n    wrapper.style.cssText = element.style.cssText;\r\n    return wrapper;\r\n  }\r\n\r\n  /**\r\n   * Shivs the given CSS text.\r\n   * (eg. header{} becomes html5shiv\\:header{})\r\n   * @private\r\n   * @param {String} cssText The CSS text to shiv.\r\n   * @returns {String} The shived CSS text.\r\n   */\r\n  function shivCssText(cssText) {\r\n    var pair,\r\n        parts = cssText.split('{'),\r\n        index = parts.length,\r\n        reElements = RegExp('(^|[\\\\s,>+~])(' + getElements().join('|') + ')(?=[[\\\\s,>+~#.:]|$)', 'gi'),\r\n        replacement = '$1' + shivNamespace + '\\\\:$2';\r\n\r\n    while (index--) {\r\n      pair = parts[index] = parts[index].split('}');\r\n      pair[pair.length - 1] = pair[pair.length - 1].replace(reElements, replacement);\r\n      parts[index] = pair.join('}');\r\n    }\r\n    return parts.join('{');\r\n  }\r\n\r\n  /**\r\n   * Removes the given wrappers, leaving the original elements.\r\n   * @private\r\n   * @params {Array} wrappers An array of printable wrappers.\r\n   */\r\n  function removeWrappers(wrappers) {\r\n    var index = wrappers.length;\r\n    while (index--) {\r\n      wrappers[index].removeNode();\r\n    }\r\n  }\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * Shivs the given document for print.\r\n   * @memberOf html5\r\n   * @param {Document} ownerDocument The document to shiv.\r\n   * @returns {Document} The shived document.\r\n   */\r\n  function shivPrint(ownerDocument) {\r\n    var shivedSheet,\r\n        wrappers,\r\n        data = getExpandoData(ownerDocument),\r\n        namespaces = ownerDocument.namespaces,\r\n        ownerWindow = ownerDocument.parentWindow;\r\n\r\n    if (!supportsShivableSheets || ownerDocument.printShived) {\r\n      return ownerDocument;\r\n    }\r\n    if (typeof namespaces[shivNamespace] == 'undefined') {\r\n      namespaces.add(shivNamespace);\r\n    }\r\n\r\n    function removeSheet() {\r\n      clearTimeout(data._removeSheetTimer);\r\n      if (shivedSheet) {\r\n          shivedSheet.removeNode(true);\r\n      }\r\n      shivedSheet= null;\r\n    }\r\n\r\n    ownerWindow.attachEvent('onbeforeprint', function() {\r\n\r\n      removeSheet();\r\n\r\n      var imports,\r\n          length,\r\n          sheet,\r\n          collection = ownerDocument.styleSheets,\r\n          cssText = [],\r\n          index = collection.length,\r\n          sheets = Array(index);\r\n\r\n      // convert styleSheets collection to an array\r\n      while (index--) {\r\n        sheets[index] = collection[index];\r\n      }\r\n      // concat all style sheet CSS text\r\n      while ((sheet = sheets.pop())) {\r\n        // IE does not enforce a same origin policy for external style sheets...\r\n        // but has trouble with some dynamically created stylesheets\r\n        if (!sheet.disabled && reMedia.test(sheet.media)) {\r\n\r\n          try {\r\n            imports = sheet.imports;\r\n            length = imports.length;\r\n          } catch(er){\r\n            length = 0;\r\n          }\r\n\r\n          for (index = 0; index < length; index++) {\r\n            sheets.push(imports[index]);\r\n          }\r\n\r\n          try {\r\n            cssText.push(sheet.cssText);\r\n          } catch(er){}\r\n        }\r\n      }\r\n\r\n      // wrap all HTML5 elements with printable elements and add the shived style sheet\r\n      cssText = shivCssText(cssText.reverse().join(''));\r\n      wrappers = addWrappers(ownerDocument);\r\n      shivedSheet = addStyleSheet(ownerDocument, cssText);\r\n\r\n    });\r\n\r\n    ownerWindow.attachEvent('onafterprint', function() {\r\n      // remove wrappers, leaving the original elements, and remove the shived style sheet\r\n      removeWrappers(wrappers);\r\n      clearTimeout(data._removeSheetTimer);\r\n      data._removeSheetTimer = setTimeout(removeSheet, 500);\r\n    });\r\n\r\n    ownerDocument.printShived = true;\r\n    return ownerDocument;\r\n  }\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  // expose API\r\n  html5.type += ' print';\r\n  html5.shivPrint = shivPrint;\r\n\r\n  // shiv for print\r\n  shivPrint(document);\r\n\r\n  if(typeof module == 'object' && module.exports){\r\n    module.exports = html5;\r\n  }\r\n\r\n}(typeof window !== \"undefined\" ? window : this, document));\r\n"],"file":"standalone/html5shiv-printshiv.js","sourceRoot":"/source/"}